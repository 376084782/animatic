{"tagline":"CSS animations with a soul","name":"Anima","body":"# Anima\r\nCSS animations with a soul\r\n\r\nWith Anima it's easy to animate over a hundred object at a time.\r\nAnd it's only **3.5k** when gzipped.\r\n\r\n## Motivation\r\nCSS animations have some limits, the main is that you can't really have full control over them. And it's near impossible to stop transitions without dirty hacks.\r\n\r\nAnother problem is calculating percents for keyframes. People create animations with time in mind, not percents. You always think of _\"it should fly and rotate for a half of a second, then stand still for another second and continue flying\"_, and not `0% start 50% fly 70% stop 90% fly`.\r\n\r\nAnima gives you the ability to use delays and durations normally, even for pure CSS animations. It has two modes: `JS` and `CSS`. The first one doesn't really use CSS transitions or `@keyframes`. On the contrary, it uses CSS transforms and 3d-transforms together with Javascript to create animation. You have full control over the flow, so you can start, stop, cancel animations and even create event-based stuff. `CSS` mode allows you to generate pure CSS animations, but it has less control features for now.\r\n\r\n_**Note**: `CSS` mode is experimental for now, not everything works as expected._\r\n\r\n## API\r\nAt first you cave to initialize the World, so the frame loop will start (so called `JS` mode)\r\n```js\r\nvar world = anima.js()\r\n```\r\nYou may also get the world without frame loop for pure css animations (`CSS` mode)\r\n```js\r\nvar world = anima.css()\r\n```\r\nthen you have to add items, you want to animate later\r\n```js\r\nvar item = world.add(document.querySelector(\"div\"))\r\n```\r\nso the world is looping now, waiting for item transformations to animate\r\n\r\nAPI remains the same in `CSS` mode, but you have to call the `.css()` method explicitly at the end of desired `.animate()`'s\r\n```js\r\nitem.animate(...).css()\r\n```\r\n\r\n### Single animation\r\nArguments:\r\n1. The map of transformations to apply. Only `translate`, `rotate` and `scale` are currently supported, but the list will expand.\r\n2. Animation duration\r\n3. Easing function\r\n4. Animation delay\r\n```js\r\nitem.animate({translate: [x, y, z]}, 500, 'ease-in-out-quad', 100)\r\n```\r\nIt's also possible to pass everything in a single object\r\n```js\r\nitem.animate({\r\n  translate: [x, y, z],\r\n  duration: 500,\r\n  ease: 'ease-in-out-quad',\r\n  delay: 100\r\n})\r\n```\r\n_**Note**: transformations' values are relative to the last known `Item` state, it's initial state or the state after previous animation. Angles for `rotate` should be in degrees._\r\n\r\n### Sequential animations\r\nYou can create sequential animations with ease :)\r\n```js\r\nitem.animate(...).animate(...).animate(...)\r\n```\r\n\r\n### Parallel animations\r\nSometimes you need to transform something in parallel\r\n```js\r\nitem.animate([{\r\n\ttranslate : [x,y,z],\r\n\tduration: 500,\r\n\teasing: 'ease-in-out-quad',\r\n\tdelay: 100\r\n},{\r\n\trotate : [angleX,angleY,angleZ],\r\n\tduration: 1000,\r\n\teasing: 'ease-in-expo',\r\n\tdelay: 400\r\n}])\r\n```\r\nSo you basically pass an array of transformations to create parallel animation.\r\n\r\n### Animation events\r\nEvery animation has it's own `start` and `end` events.\r\n```js\r\nitem.animate(...).on('start', callback).on('end', callback)\r\n```\r\n\r\n### Timing functions\r\nHere's the list of al supported timing functions\r\n`linear`\r\n\r\n`ease-in-quad` `ease-in-cubic` `ease-in-quart` `ease-in-quint` `ease-in-sine` `ease-in-expo` `ease-in-circ` `ease-in-back` \r\n\r\n`ease-out-quad` `ease-out-cubic` `ease-out-quart` `ease-out-quint` `ease-out-sine` `ease-out-expo` `ease-out-circ` `ease-out-back`\r\n\r\n`ease-in-out-quad` `ease-in-out-cubic` `ease-in-out-quart` `ease-in-out-quint` `ease-in-out-sine` `ease-in-out-expo` `ease-in-out-circ` `ease-in-out-back`\r\n\r\nYou can learn more about them at [easings.net](http://easings.net)\r\n\r\n## Examples\r\n### requestAnimationFrame\r\n- [keyboard control](example/keyboard.html) (use `↑` `↓` `←` `→` and `W` `A` `S` `D` to transform)\r\n- [animation chain](example/bounce.html)\r\n- [parallel animations](example/parallel.html)\r\n- [delayed animation](example/delay.html)\r\n\r\n### pure CSS\r\n- [animation chain](example/bounce_css.html)\r\n- [delayed animation](example/delay_css.html)\r\n- [parallel animations](example/parallel_css.html) (do not support custom `timing-functions` for now)","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}